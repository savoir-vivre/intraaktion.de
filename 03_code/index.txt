: Code

:: An welche technologische Realität wollen wir anknüpfen?

Möglichkeiten und Motivationen des digitalen Zeitalters
- jedenfalls wie es die meisten kennen - sind vorwiegend
geprägt von alten Dogmen. Die jetzige Form von Technologie und ihrer
Nutzung ist nicht die einzig mögliche, sondern die eine, welche sich
bisher am besten in alten Strukturen einschmiegen konnte,
die aber ihre anderen Möglichkeiten noch nicht kannte und oft auch noch
nicht kennen konnte.

----
The undersea cables and satellite dishes which carry today’s bits and bytes still trace the old ship routes of national empires. [...] The network is neither good, nor bad, and never neutral; instead, the repetition of national politics in virtual space reminds us that our digital lives take place in the context of history and society, subject to the same powers and pressures as our physical lives.
----

- citizen-ex.com [1]

----
Computers make it easier to do a lot of things, but most of the things they make it easier to do don’t need to be done.
----

- Andy Rooney

Wenn wir der Frage nachgehen wollen, wieso sich Technologie und Kultur
(und andere Bereiche) aneinander reiben und gegenseitig aussperren,
müssen wir diese Reibungspunkte ausmachen und zuordnen. Voraussetzung
dafür ist das Wissen um genuin eigene Eigenschaften aktueller
Technologie. Welche Eigenschaften hat sie, weil es anders nicht möglich
ist? Welche, weil sie für die Schaffenden sinnvoll sind? Welche nur
deshalb, um vermeintliche Erwartungen Dritter zu erfüllen, die vielleicht
nur wenig über Technologie wissen? Welchen möglichen Eigenschaften wurde
bisher noch nicht genug Raum zur Erprobung eingeräumt und welche werden
fälschlicherweise als Dogma gehandelt? Hinterfragen wir Technologie auf
diese Weise nicht, schießen wir bei unseren Bemühungen
auf zu viele Strohpuppen, die gar nicht mit Technologie selbst zu tun
haben und stolpern an wertvollen Chancen und Begegnungsfeldern vorbei,
die wir woanders vielleicht nicht finden werden.

----
That’s the thing about people who think they hate computers. What they really hate is lousy programmers.
----

- Larry Niven und Jerry Pournelle in
/Oath of Fealty/

:: progressive und emanzipierte Technologie

----
Software sucks because users demand it to.
----

- Nathan Myhrvold

Bevor wir also blind jetzige Mainstream-Dogmen der IT-Landschaft als
Schablonen für eine Hochzeit von Kultur und Technologie benutzen,
sollten wir erst danach suchen, welche Umgangsformen mit Technologie
sich noch gebildet haben und welche davon am ehesten einer inneren
reflektierten Logik ihrer nativen Gegebenheiten folgen. Sonst kopieren
und reproduzieren wir mit unseren Bemühungen unwissend beliebige alte
Denkmuster, die sich auch in aktuelle Technologien eingeschlichen haben,
aber die wir eigentlich überwinden wollen:
Wenn wir Pech haben, finden wir nur Technologien, die zum Zwecke ihrer
/Ausnutzung/
für andere Bereiche geschaffen wurden, welche oft kein Verständnis der
Technologie mit sich bringen und vor allem keine Motivation, die
Technologie als Selbstzweck selbstbestimmt gedeihen zu lassen. Dann wird
es ein schwieriges Unterfangen die notwendigen Eigenschaften einer
Technologie von denen zu Trennen, die nur aufgrund der gegebenen
Umstände der Bereiche da sind, die die Technologie ausnutzen. 
Wenn wir Glück haben, finden wir Technologien, die aus Bewusstsein über
sich selbst und ihren langfristigen Folgen und Bedürfnissen, die sie für
ihre Macher_innen befriedigen, entstanden sind. Im Idealfall sind sie im
Selbstverständnis schon losgelöst von Diktaten rein ausnutzender
Bereiche und autark. Sie sind sich den Problemen ihres eigenen
Handwerks bewusst und vermeiden und lösen diese strukturell ohne
Rücksicht auf andere Bereiche. Dann sind sie selbsttragend und haben eine
abschließende Entwicklung als Ziel vor Augen. Egal ob die abschließende
Implementierung schon erreicht ist oder noch nicht, ein Funktionsumfang
und Design ist schon prototypisiert und kann bewertet werden, anstatt
offen gelassen zu werden und einfach auf Diktate von außen zu warten, um
von ihnen immer wieder neu bestimmt zu werden und darin den Existenz-
und Arbeitssinn zu suchen. Solche Technologien müssten am ehesten
alle notwendigen Eigenschaften einer progressiven Technologie
ausgebildet und gleichzeitig optionale Eigenschaften und Probleme, die
sich aus Bedürfnissen anderer Bereiche ergaben, ausgeklammert haben. Sie
stellten daher den geeignetsten Ausgangspunkt einer Betrachtung in unserem
Sinne dar.

----
The ability to simplify means to eliminate the unnecessary so that the necessary may speak.
----

- Hans Hoffmanna

----
The network can be occupied, controlled, forbidden and attacked in just the same way as any other territory. But unlike other territories, its nature is to reveal its workings to the curious enquirer, to state its nature, and make itself amenable to investigation and change. What was not visible is written down, if we understand how to read it. By following the network, it’s possible to illuminate other narratives of history and politics, ones which have not been seen and told so clearly before, and may point the way to other futures. [...] As we build new worlds with our technologies, knitted from fiber-optic light and lines of code, it is incumbent on us to ensure it does not reproduce the erasures and abuses of the old, but properly accounts for the rights and liberties of every one of us.
----

- citizen-ex.com [1]

Bei dieser Suche kommt unter aktuellen Technologien Software viel eher
in Erwägung als Hardware, da bei ihr durch die ausgeprägte Landschaft an
Open-Source-Projekten ein offener Einblick, Partizipation und
Eigeninitiative viel leichter möglich ist.

:: Wieso Code zu unzugänglich ist und wieso er das nicht sein muss / Wie jede_r Nutzer_in auch Entwickler_in werden kann

----
sinit is considered complete and no further development is expected to happen.
----

----
We strive to maintain minimalism and clarity to drive development to completion.
----

----
With complex code, problems are solved in suboptimal ways, valuable resources are endlessly tied up, performance slows to a halt, and vulnerabilities become a commonplace. The only solution is to scrap the entire project and rewrite it from scratch.
 
The bad news: quality rewrites rarely happen, because hackers are proud of large amounts of code. They think they understand the complexity in the code, thus there’s no need to rewrite it. They think of themselves as masterminds, understanding what others can never hope to grasp. To these types, complex software is the ideal.
 
Ingenious ideas are simple. Ingenious software is simple. Simplicity is the heart of the Unix philosophy. The more code lines you have removed, the more progress you have made. As the number of lines of code in your software shrinks, the more skilled you have become and the less your software sucks.
----

- suckless.org [2] [3]

Code, der möglichst kurz und simpel gehalten ist, sogar einen fertigen
Status erreichen soll, statt mindestens wöchentlich ein Update zu
erfahren, ist heute regelrecht anachronistisch. Er steigert den
Marktwert von Programmierer_innen nicht, die möglichst schnell
produzieren sollen, deren Produkte so komplex sind, dass nur sie - die
Genies, die sie erschufen - , sie noch verstehen und pflegen können.
Wurde der Horizont der Komplexität erreicht, dass auch die
Originalautor_innen nicht mehr dahinter blicken können, wird von neuem
begonnen. Neues Projekt, neuer Code, neue Sprache, auf einer Basis, die
inzwischen auch komplexer wurde. In so einem perpetuum mobile ist immer
genügend Arbeit für Programmierer da und es ist verständlich, wieso diese
Form von Softwarekultur sich für das Bestreiten eines Lebensunterhalts
durchgesetzt hat.

----
The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry.
----

- Henry Petroski

----
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.
----

- Brian W. Kernighan und P. J. Plauger in
/The Elements of Programming Style./

Wenn Informatiker_innen sich schon mit den eigenen Werken selbst
aussperren, ist aber an gar keine Möglichkeit zu denken, wie Software für
Schaffende aus anderen Bereichen wie Kultur ein nutz- und formbares
Werkzeug werden kann, das sie selbstbestimmt und mündig nutzen können.
Es braucht also zuerst eine Softwarekultur, die Einfachheit und Eleganz
als Stärken versteht. Es wäre ein Fortschritt und auch schon ein großer
Unterschied zur heutigen Situation, wenn diese beiden Größen zunächst an
den Fähigkeiten von Entwickler_innen gemessen werden. Von da aus kann
das utopische Ziel in Angriff genommen werden, dass ein Code auch Äußere
ein- statt ausschließt. Oder: dass jede_r Nutzer_in auch Entwickler_in
werden kann.
Letzteres muss nicht heißen, dass dann allen die Bürde des
Programmierens auferlegt wird, sondern vor allem, dass diese Bürde eine
*sehr viel geringere*
sein müsste, damit jene, die es
*wollen*
oder gelegentlich
*müssten,*
überhaupt eine Chance dazu haben, Software in ihrem Sinne zu verändern.

----
The computing scientist’s main challenge is not to get confused by the complexities of his own making.
----

- E. W. Dijkstra


Zur Zeit ist es meistens so: 
Software ist ein starres Werkzeug für denjenigen, die sie nicht
verstehen und umgestalten können. Code eines Dritten gibt
Möglichkeitsräume für Schaffende aus anderen Bereichen schon vor.
Alles neue, was sie schaffen wollen, und wo Software ein
formgebender Faktor ist, wird teilweise Ergebnis einer
Unmündigkeit und eines Nicht-Verstehens über etwas, was eine
Softwareindustrie sich für die vermeintliche Befriedigung eines
Bedürfnisses erdacht hat, ohne sich dabei aber selbst obsolet zu machen.
Sie kennen die eigenen inneren Mechaniken des benutzten Codes nicht und
können deshalb auch nicht ausmachen, welche Alternativen möglich,
unmöglich, sinnvoll oder unsinnig wären. 
Entwickler_innen werden dann für die Neu- oder Weiterentwicklung
engagiert und dabei meist als Kaste reiner Dienstleister_innen angesehen.
Der innere Entwicklungsprozess wird völlig auf sie ausgelagert.
Typischerweise werden Auftraggeber_innen nie eine Zeile des Codes sehen,
vertrauen daher (in gewissem Sinne buchstäblich) blind den
Entwickler_innen.
In der Rolle der reinen Dienstleister_innen verbleiben diese aber unter
dem Druck des Wettbewerbs nach Komfortzonen. Wenn sie als reine
Dienstleister_innen durch andere austauschbar sind, bleibt wenig Raum,
um die eigenen Mechaniken des Codes in einer eigenen Logik oder Ästhetik
auszuarbeiten, die von den Vorstellungen der Auftraggeber_innen abweichen,
wo es sinnvoll wäre. Deshalb werden die Mechaniken des Codes eher gleich
unter Abstraktionen verborgen, die diesen Vorstellungen möglichst
entsprechen. Diese Abstraktionen führen nicht nur ansonsten unnötige
Komplexität ein und verbergen abermals den direkten Einblick auf die
Arbeitsweise der Software, sondern sie sind auch die Orte, in denen
Vorstellungen prädigitaler Zeit in digitale Werkzeuge übersetzt werden,
statt sich ganz neuen Formen der Aufgabenbewältigung zu widmen. 
Es ist diese Trennung von Entwickler_innen und Nutzer_innen, die diese
Abstraktionen aufrecht halten.

Um ein echtes digitales Zeitalter einzuläuten und konsequent mit seinen
Möglichkeiten umzugehen, müssen die Grenzen zwischen Nutzendem und
Schaffendem von Technologie also langfristig verschwimmen.

----
Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defence against complexity.
----

- David Gelernter

----
When I am working on a problem I never think about beauty. I think only how to solve the problem. But when I have finished, if the solution is not beautiful, I know it is wrong.
----

- R. Buckminster Fuller

----
One of my most productive days was throwing away 1000 lines of code.
----

- Ken Thompson

Zitate ohne Fußnoten von cat-v.org [4]

[1] http://citizen-ex.com/stories/io
[2] http://core.suckless.org/sinit
[3] http://suckless.org/philosophy
[4] http://quotes.cat-v.org/programming/
