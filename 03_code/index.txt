: Code

:: Technologische Alltagsrealität. Nur welche?

Möglichkeiten und Motivationen des uns bekannten digitalen Zeitalters sind vorwiegend geprägt von alten Dogmen. Die jetzige Form von Technologie und ihrer Nutzung ist nicht die einzig mögliche, sondern die eine, die sich bisher am besten in diejenigen alten Strukturen einschmiegen konnte, die ihre anderen Möglichkeiten noch nicht kannte und oft auch noch nicht kennen konnte. Das ist ein Problem. 

----
The undersea cables and satellite dishes which carry today’s bits and bytes still trace the old ship routes of national empires. [...] The network is neither good, nor bad, and never neutral; instead, the repetition of national politics in virtual space reminds us that our digital lives take place in the context of history and society, subject to the same powers and pressures as our physical lives.
----

- citizen-ex.com/stories/io [1]

Wenn wir der Frage nachgehen wollen, wieso sich Technologie und Kultur (und andere Bereiche) aneinander reiben und gegenseitig aussperren, müssen wir diese Reibungspunkte ausmachen und zuordnen. Dafür müssen wir aber wissen, welche Eigenschaften der uns heutigen Technologien genuin eigene sind, welche vielleicht nur wegen überbordender Einflüsse aus anderen Bereichen da sind, und welche vielleicht noch zu wenig in Erscheinung treten konnten, um im Wechselspiel mit anderen Bereichen bewusst zu werden. Machen wir das nicht, schießen wir bei unseren Bemühungen auf zu viele Strohpuppen, die gar nicht mit Technologie selbst zu tun haben und stolpern an wertvollen Chancen und Begegnungsfeldern vorbei, die wir woanders vielleicht nicht finden werden. 

Bevor wir also blind jetzige Mainstream-Dogmen der IT-Landschaft als Schablonen für eine Hochzeit von Kultur und Technologie benutzen, sollten wir erst danach suchen, welche Umgangsformen mit Technologie sich noch gebildet haben und welche davon am ehesten einer inneren reflektierten Logik ihrer nativen Gegebenheiten folgen. 
Wenn wir Pech haben, finden wir nur Technologien, die zum Zwecke ihrer /Ausnutzung/ für andere Bereiche geschaffen wurden, welche oft kein Verständnis der Technologie mit sich bringen und vor allem keine Motivation, die Technologie als Selbstzweck selbstbestimmt gedeihen zu lassen. Dann wird es ein schwieriges Unterfangen die notwendigen Eigenschaften einer Technologie von denen zu Trennen, die nur aufgrund der gegebenen Umstände der Bereiche da sind, die die Technologie ausnutzen. 
Wenn wir Glück haben, finden wir Technologien, die aus Bewusstsein über sich selbst und ihren langfristigen Folgen und Bedürfnissen, die sie für ihre Macher_innen befriedigen, entstanden ist. Im Idealfall ist sie im Selbstverständnis schon losgelöst von Diktaten rein ausnutzender Bereiche und ist autark. Sie ist sich den Problemen ihres eigenen Handwerks bewusst und vermeidet und löst diese strukturell ohne Rücksicht auf andere Bereiche. Dann ist sie selbsttragend und hat eine abschließende Entwicklung als Ziel vor Augen. Egal ob die abschließende Implementierung schon erreicht ist oder noch nicht, ein Funktionsumfang und Design ist schon prototypisiert und kann bewertet werden, anstatt offen gelassen zu werden und einfach auf Diktate von außen zu warten, um von ihnen immer wieder neu bestimmt zu werden und darin den Existenz- und Arbeitssinn zu suchen. Eine solche Technologie müsste am ehesten alle notwendigen Eigenschaften einer progressiven Technologie ausgebildet und gleichzeitig optionale Eigenschaften und Probleme, die sich aus Bedürfnissen anderer Bereiche ergaben, ausgeklammert haben. Sie stellt daher den geeignetsten Ausgangspunkt einer Betrachtung in unserem Sinne dar. 

----
The network can be occupied, controlled, forbidden and attacked in just the same way as any other territory. But unlike other territories, its nature is to reveal its workings to the curious enquirer, to state its nature, and make itself amenable to investigation and change. What was not visible is written down, if we understand how to read it. By following the network, it’s possible to illuminate other narratives of history and politics, ones which have not been seen and told so clearly before, and may point the way to other futures. [...] As we build new worlds with our technologies, knitted from fiber-optic light and lines of code, it is incumbent on us to ensure it does not reproduce the erasures and abuses of the old, but properly accounts for the rights and liberties of every one of us.
----

- citizen-ex.com [1]

Bei dieser Suche kommt unter aktuellen Technologien Software viel eher in Erwägung als Hardware, da bei ihr durch die ausgeprägte Landschaft an Open-Source-Projekten ein offener Einblick, Partizipation und Eigeninitiative viel leichter möglich ist. 

:: Softwareentwicklung als utopisches Performativ: Beispiele

----
sinit is considered complete and no further development is expected to happen.
----

----
We strive to maintain minimalism and clarity to drive development to completion.
----

----
With complex code, problems are solved in suboptimal ways, valuable resources are endlessly tied up, performance slows to a halt, and vulnerabilities become a commonplace. The only solution is to scrap the entire project and rewrite it from scratch.
 
The bad news: quality rewrites rarely happen, because hackers are proud of large amounts of code. They think they understand the complexity in the code, thus there’s no need to rewrite it. They think of themselves as masterminds, understanding what others can never hope to grasp. To these types, complex software is the ideal.
 
Ingenious ideas are simple. Ingenious software is simple. Simplicity is the heart of the Unix philosophy. The more code lines you have removed, the more progress you have made. As the number of lines of code in your software shrinks, the more skilled you have become and the less your software sucks.
----

- suckless.org [2] [3]

Code, der möglichst kurz und simpel gehalten ist, sogar einen fertigen Status erreichen soll, statt mindestens wöchentlich ein Update zu erfahren, ist heute regelrecht anachronistisch. Er steigert den Marktwert von Programmierer_innen nicht, die möglichst schnell produzieren sollen, deren Produkte so komplex sind, dass nur sie - die Genies, die sie erschufen - , sie noch verstehen und pflegen können. 
Wurde der Horizont der Komplexität erreicht, dass auch die Originalautor_innen nicht mehr dahinter blicken können? Fangen wir von vorne an, neues Projekt, neuer Code, neue Sprache, auf einer Basis, die inzwischen auch komplexer wurde. Es ist immer genug Arbeit da in einem perpetuum mobile der IT.

----
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.
----

- Brian W. Kernighan and P. J. Plauger in //The Elements of Programming Style.// [4]

Wenn Informatiker_innen sich schon mit den eigenen Werken selbst aussperren, ist an gar keine Möglichkeit zu denken, wie Software für Schaffende aus anderen Bereichen wie Kultur ein nutz- und formbares Werkzeug werden kann, das sie selbstbestimmt und mündig nutzen können. Es braucht also zuerst eine Softwarekultur, die Einfachheit und Eleganz als Stärken versteht. Erst gemessen an den Fähigkeiten der Entwickler_innen, von da aus kann weiter gedacht werden, wie ein Code auch Äußere ein- statt ausschließt. Oder: wie jede_r Nutzer_in auch Entwickler_in werden kann. 

----
The computing scientist’s main challenge is not to get confused by the complexities of his own making.
----

- E. W. Dijkstra [4]

----
Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defence against complexity.
----

- David Gelernter [4]

----
When I am working on a problem I never think about beauty. I think only how to solve the problem. But when I have finished, if the solution is not beautiful, I know it is wrong.
----

- R. Buckminster Fuller

----
One of my most productive days was throwing away 1000 lines of code.
----

- Ken Thompson [4]



[1] http://citizen-ex.com/stories/io
[2] http://core.suckless.org/sinit
[3] http://suckless.org/philosophy
[4] http://quotes.cat-v.org/programming/
